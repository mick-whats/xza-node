// Generated by CoffeeScript 2.2.4
(function() {
  var _, assert, test;

  assert = require('assert');

  _ = require('../').lodash;

  ({test} = require('ava'));

  require('../');

  test('util.sizeof', function(t) {
    var obj;
    t.is(_.sizeof(1999), '8 B');
    obj = (function() {
      var results = [];
      for (var j = 0; j <= 10000; j++){ results.push(j); }
      return results;
    }).apply(this).map(function(i) {
      return {
        name: `testName${i}`,
        value: i
      };
    });
    return t.is(_.sizeof(obj), '576 kB');
  });

  test('util.strToNumber', function(t) {
    t.true(_.strToNumber('123,456') === 123456);
    t.true(_.strToNumber('-123,456,789') === -123456789);
    t.true(_.strToNumber('△123,456,789') === -123456789);
    t.true(_.strToNumber('▲123,456,789') === -123456789);
    t.true(_.strToNumber('Δ123,456,789') === -123456789);
    t.true(Number.isNaN(_.strToNumber('▼123,456,789')));
    t.true(Number.isNaN(_.strToNumber('abc')));
    t.false(_.strToNumber('abc', false) === (0/0));
    t.true(_.strToNumber('abc', false) === false);
    t.false(_.strToNumber('abc', true) === (0/0));
    t.true(_.strToNumber('abc', true) === true);
    t.false(_.strToNumber('abc', null) === (0/0));
    t.true(_.strToNumber('abc', null) === null);
    t.true(_.strToNumber('18円32銭') === 18.32);
    t.true(_.strToNumber('18円00銭') === 18);
    t.true(_.strToNumber('18%') === 18);
    t.true(_.strToNumber('18％') === 18);
    return t.true(_.strToNumber('１２３、４５６、７８９') === 123456789);
  });

  test('replaceAll(str, obj)', function(t) {
    var str;
    str = '3円00銭';
    t.is(_.replaceAll(str, {
      '円': '.',
      '銭': ''
    }), '3.00');
    str = 'abcabcabc';
    t.is(_.replaceAll(str, {
      a: '!',
      b: '',
      c: '?'
    }), '!?!?!?');
    str = 'abcabcabc';
    return t.is(_.replaceAll(str, {
      '[a-b]': ''
    }), 'ccc');
  });

  test('toHalfString(str)', function(t) {
    var str;
    str = 'ａｂｃ５００';
    t.is(_.toHalfString(str), 'abc500');
    str = 'ａｂｃ！？￥';
    return t.is(_.toHalfString(str), 'abc！？￥');
  });

  test('whiteSpaceRemover(str)', function(t) {
    t.is(_.whiteSpaceRemover(' a bc a　b　c　'), 'abcabc');
    return t.is(_.whiteSpaceRemover('平成30年 5月11日'), '平成30年5月11日');
  });

  test('toDateString(obj,format)', function(t) {
    var td;
    td = _.toDateString;
    // t.is td(new Date()),'2018-05-27'
    t.is(td(1527379925302), '2018-05-27'); // milliseconds
    t.is(td([2018, 4, 27]), '2018-05-27');
    t.is(td('２０１８年５月２７日'), '2018-05-27');
    t.is(td('2018年1月1日'), '2018-01-01');
    t.is(td('平成30年 5月11日'), '2018-05-11');
    t.is(td('平成３０年５月２７日'), '2018-05-27');
    t.is(td('昭和３０年５月２７日'), '1955-05-27');
    t.is(td('大正３年５月２７日'), '1914-05-27');
    t.is(td('2018-5-27'), '2018-05-27');
    t.is(td('20180527'), '2018-05-27');
    // t.is td('成３０年５月２７日'),'Invalid date'
    return t.is(td('2018-5-27', 'YYYYMMDD'), '20180527');
  });

  test('splitUppercase(str,type)', function(t) {
    var sp;
    sp = _.splitUppercase;
    // 小文字と大文字の間で分割
    t.deepEqual(sp('isJSON'), ['is', 'JSON']);
    t.deepEqual(sp('ILoveYou'), ['ILove', 'You']);
    t.deepEqual(sp('NHK News'), ['NHKNews']);
    t.deepEqual(sp('NextAccumulatedQ2Duration'), ['Next', 'Accumulated', 'Q2', 'Duration']);
    // 大文字の前で分割
    t.deepEqual(sp('isJSON', true), ['is', 'J', 'S', 'O', 'N']);
    t.deepEqual(sp('ILoveYou', true), ['I', 'Love', 'You']);
    t.deepEqual(sp('NHK News', true), ['N', 'H', 'K', 'News']);
    return t.deepEqual(sp('NextAccumulatedQ2Duration', true), ['Next', 'Accumulated', 'Q2', 'Duration']);
  });

  test('deepKeys', function(t) {
    var _keys, obj;
    obj = {
      a: {
        b: {
          c: [1, 2, 3]
        },
        d: new Date()
      },
      e: {
        f: {
          g: 'h'
        }
      }
    };
    _keys = _.deepKeys(obj);
    t.deepEqual(_keys, ['a.b.c.0', 'a.b.c.1', 'a.b.c.2', 'a.d', 'e.f.g']);
    obj = [
      {
        name: 'alice',
        age: 17
      },
      {
        name: 'bob',
        age: 32
      },
      {
        name: 'charlie',
        age: 25
      }
    ];
    _keys = _.deepKeys(obj);
    return t.deepEqual(_keys, ['0.name', '0.age', '1.name', '1.age', '2.name', '2.age']);
  });

  test('commonPath(pathStrings)', function(t) {
    var paths;
    paths = ['a.b.c.d.e.f', 'a.b.c.x.z', 'a.b.c', 'a.b.c.d.s'];
    return t.deepEqual(_.commonPath(paths), ['a', 'b', 'c']);
  });

  test('commonPath(pathArray)', function(t) {
    var paths;
    paths = [['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'x', 'z', 'q'], ['a', 'b', 'c', 'g', 'r'], ['a', 'b', 'c', 's'], ['a', 'b', 'c']];
    return t.deepEqual(_.commonPath(paths), ['a', 'b', 'c']);
  });

  test('compactObject(obj)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(_.compactObject(obj), {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    });
  });

  test('flattenObject(obj)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(_.flattenObject(obj), {
      aaa_bbb_ccc: 1,
      aaa_bbb_ddd: 0,
      aaa_eee_fff: void 0,
      aaa_eee_ggg: null,
      aaa_hhh_iii_jjj: true
    });
  });

  test('flattenObject(obj, separator)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(_.flattenObject(obj, '-'), {
      'aaa-bbb-ccc': 1,
      'aaa-bbb-ddd': 0,
      'aaa-eee-fff': void 0,
      'aaa-eee-ggg': null,
      'aaa-hhh-iii-jjj': true
    });
  });

  test('eachObject(obj, fn)', function(t) {
    var obj;
    t.plan(4);
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    return _.eachObject(obj, function(val, path, index, object) {
      if (path.includes('aaa.bbb.ccc')) {
        return t.is(val, 1);
      } else if (path.includes('aaa.bbb.ddd')) {
        return t.is(val, 2);
      } else if (path.includes('aaa.eee.fff')) {
        return t.is(val, 3);
      } else if (path.includes('aaa.eee.ggg')) {
        return t.is(val, 4);
      }
    });
  });

  test('mapObject(obj, fn) with sum', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = _.mapObject(obj, function(val, path, index, object) {
      return val * 2;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ccc: 2,
          ddd: 4
        },
        eee: {
          fff: 6,
          ggg: 8
        }
      }
    });
  });

  test('mapObject(obj, fn) with returned array', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    };
    newObj = _.mapObject(obj, function(val, path, index, object) {
      var newPath;
      if (path.match(/aaa\.bbb/)) {
        newPath = path.replace('aaa.bbb', 'xxx');
        return [newPath, val];
      } else {
        return [path, val];
      }
    });
    return t.deepEqual(newObj, {
      xxx: {
        ccc: 1,
        ddd: 0
      },
      aaa: {
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    });
  });

  test('mapObject(obj, fn) with returned object', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    };
    newObj = _.mapObject(obj, function(val, path, index, object) {
      var newPath;
      if (path.match(/aaa\.bbb/)) {
        newPath = path.replace('aaa.bbb', 'xxx');
        return {
          [newPath]: val
        };
      } else {
        return {
          [path]: val
        };
      }
    });
    return t.deepEqual(newObj, {
      xxx: {
        ccc: 1,
        ddd: 0
      },
      aaa: {
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    });
  });

  test('toText(obj)', function(t) {
    var _t, obj;
    obj = {
      a: 1
    };
    _t = _.toText(obj);
    t.not(_t, '{"a": 1}');
    return t.regex(_t, /{\s{2,}"a": 1\n}/);
  });

  test('toText(arr)', function(t) {
    var _t, obj;
    obj = [1, 2, 3];
    _t = _.toText(obj);
    t.not(_t, '[1,2,3]');
    return t.regex(_t, /\[\n\s{2}1,\n\s{2}2,\n\s{2}3\s{1}\]/);
  });

  test('toText(fn)', function(t) {
    var _t, obj;
    obj = () => {
      return true;
    };
    _t = _.toText(obj);
    return t.regex(_t, /\(\(\)\s=>\s{\n\s{6}return true;\n\s{4}}\)\(\)/);
  });

  test('toText(str)', function(t) {
    var _t, obj;
    obj = 'str';
    _t = _.toText(obj);
    return t.is(_t, 'str');
  });

  test('toText(num)', function(t) {
    var _t, obj;
    obj = 123;
    _t = _.toText(obj);
    return t.is(_t, '123');
  });

  test('toText(undefined)', function(t) {
    var _t, obj;
    obj = void 0;
    _t = _.toText(obj);
    return t.is(_t, 'undefined');
  });

  test('toText(null)', function(t) {
    var _t, obj;
    obj = null;
    _t = _.toText(obj);
    return t.is(_t, 'null');
  });

  test('toText(true)', function(t) {
    var _t, obj;
    obj = true;
    _t = _.toText(obj);
    return t.is(_t, 'true');
  });

  test('toText(NaN)', function(t) {
    var _t, obj;
    obj = 0/0;
    _t = _.toText(obj);
    return t.is(_t, 'NaN');
  });

  test('rejectObject(obj, fn)', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = _.rejectObject(obj, function(val, path, index, object) {
      return val % 2 === 0;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ccc: 1
        },
        eee: {
          fff: 3
        }
      }
    });
  });

  test('rejectObject(obj, array)', function(t) {
    var obj;
    obj = {
      a: 1,
      b: 2,
      c: 3
    };
    return t.deepEqual(_.rejectObject(obj, ['b']), {
      a: 1,
      c: 3
    });
  });

  test('filterObject(obj, fn)', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = _.filterObject(obj, function(val, path, index, object) {
      return val % 2 === 0;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ddd: 2
        },
        eee: {
          ggg: 4
        }
      }
    });
  });

  test('filterObject(obj, array)', function(t) {
    var obj;
    obj = {
      a: 1,
      b: 2,
      c: 3
    };
    return t.deepEqual(_.filterObject(obj, ['a', 'c']), {
      a: 1,
      c: 3
    });
  });

  test('setTimeout(fn)', async function(t) {
    var testFn;
    testFn = function() {
      return new Promise(function(resolve, reject) {
        return _.setTimeout(function() {
          return resolve('ok');
        });
      });
    };
    return t.is((await testFn()), 'ok');
  });

  test('setTimeout(delay,fn)', async function(t) {
    var testFn;
    testFn = function() {
      return new Promise(function(resolve, reject) {
        return _.setTimeout(200, function() {
          return resolve('ok');
        }, 'text1', 'bool1');
      });
    };
    return t.is((await testFn()), 'ok');
  });

  test('setTimeout(delay,fn,param1,param2)', async function(t) {
    var testFn;
    testFn = function() {
      return new Promise(function(resolve, reject) {
        var fn;
        fn = function(param1, param2) {
          return resolve(param2);
        };
        return _.setTimeout(fn, 200, 'text1', 'text2');
      });
    };
    return t.is((await testFn()), 'text2');
  });

}).call(this);
