// Generated by CoffeeScript 2.2.4
(function() {
  var _, moment, prettyBytes, sizeof, utility;

  _ = require('lodash');

  sizeof = require('object-sizeof');

  prettyBytes = require('pretty-bytes');

  moment = require('moment');

  utility = {
    sizeof: function(obj) {
      return prettyBytes(sizeof(obj));
    },
    strToNumber: function(str, returnValue = 0/0) {
      var num, repObj;
      str = utility.toHalfString(str);
      repObj = {
        '^[△▲Δ]': '-',
        '[,、銭%％]': '',
        '[円]': '.'
      };
      str = utility.replaceAll(str, repObj);
      num = Number(str.split(',').join('').trim());
      if (_.isNaN(num)) {
        return returnValue;
      } else {
        return num;
      }
    },
    replaceAll: function(str, obj) {
      var key, ret, val;
      ret = str;
      for (key in obj) {
        val = obj[key];
        ret = ret.replace(new RegExp(key, 'g'), val);
      }
      return ret;
    },
    toHalfString: function(str) {
      return str.replace(/[０-９ａ-ｚＡ-Ｚ]/g, function(s) {
        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
      });
    },
    whiteSpaceRemover: function(str) {
      return str.replace(/[\s　]/g, '');
    },
    toDateString: function(obj, format) {
      var _day, _era, _eras, _format, _match, _month, _obj, _raw, _year;
      _obj = obj;
      _format = format || 'YYYY-MM-DD';
      if (_.isString(obj)) {
        _obj = utility.whiteSpaceRemover(obj);
        _obj = utility.toHalfString(obj);
        if (_match = _obj.match(/(.*)[年-](\d*)[月-](\d*)日?/)) {
          [_raw, _year, _month, _day] = _match;
          if (_month.length === 1) {
            _month = `0${_month}`;
          }
          if (_day.length === 1) {
            _day = `0${_day}`;
          }
          if (_eras = _year.match(/([^\x01-\x7E\uFF61-\uFF9F]{2})(\d*)/)) {
            [_raw, _era, _year] = _eras;
            switch (_era) {
              case '平成':
                _year = Number(_year) + 1988;
                break;
              case '昭和':
                _year = Number(_year) + 1925;
                break;
              case '大正':
                _year = Number(_year) + 1911;
                break;
            }
          }
          _obj = `${_year}-${_month}-${_day}`;
        }
      }
      return moment(_obj).format(_format);
    },
    splitUppercase: function(str, type = 0) {
      str = utility.whiteSpaceRemover(str);
      if (type) {
        str = str.replace(/([A-Z])/g, '___$1');
        str = str.replace(/^___/g, '');
        return str.split('___');
      } else {
        str = str.replace(/([a-z0-9])([A-Z])/g, '$1___$2');
        return str.split('___');
      }
    },
    deepKeys: function(obj) {
      var _depth, _halfway, _keys, first, next;
      // result = []
      first = true;
      _depth = [];
      next = true;
      while (next) {
        if (first) {
          _depth.push(Object.keys(obj));
          first = false;
        }
        _keys = _.last(_depth);
        _halfway = [];
        next = false;
        _keys.forEach(function(key) {
          var _arr, _halfObj;
          _halfObj = _.get(obj, key);
          if (_.isPlainObject(_halfObj) || _.isArray(_halfObj)) {
            next = true;
            _arr = Object.keys(_halfObj).map(function(childKey) {
              return `${key}.${childKey}`;
            });
            return _halfway.push(_arr);
          } else {
            return _halfway.push(key);
          }
        });
        _depth.push(_.flatten(_halfway));
      }
      return _.last(_depth);
    },
    commonPath: function(paths) {
      var pathArray, result;
      pathArray = paths.map(function(path) {
        if (_.isString(path)) {
          return _.toPath(path);
        }
        return path;
      });
      result = [];
      pathArray[0].some(function(s, columnIndex) {
        var rows;
        rows = pathArray.map(function(row) {
          return row[columnIndex];
        });
        if (rows.every(function(row) {
          return row === s;
        })) {
          result.push(s);
          return false;
        } else {
          return true;
        }
      });
      return result;
    },
    compactObject: function(obj) {
      var _paths, newObj;
      _paths = utility.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p) {
        var val;
        val = _.get(obj, p);
        if (_.isNil(val)) {

        } else {
          _.set(newObj, p, val);
        }
      });
      return newObj;
    },
    flattenObject: function(obj, separator = '_') {
      var _paths, newObj;
      _paths = utility.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p) {
        var _newPath, val;
        val = _.get(obj, p);
        _newPath = p.replace(/\./g, separator);
        return _.set(newObj, _newPath, val);
      });
      return newObj;
    },
    mapObject: function(obj, fn) {
      var _paths, newObj;
      _paths = utility.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p, i) {
        var key, resArr, val;
        val = _.get(obj, p);
        resArr = fn(val, p, i, obj);
        if (_.isArray(resArr)) {
          if (resArr.length > 1) {
            return _.set(newObj, resArr[0], resArr[1]);
          } else {
            return _.set(newObj, p, resArr);
          }
        } else if (_.isPlainObject(resArr)) {
          key = Object.keys(resArr)[0];
          val = resArr[key];
          return _.set(newObj, key, val);
        } else {
          return _.set(newObj, p, resArr);
        }
      });
      return newObj;
    },
    toText: function(obj) {
      switch (typeof obj) {
        case 'object':
          return JSON.stringify(obj, null, 2);
        case 'undefined':
          return 'undefined';
        case 'function':
          return `(${obj.toString()})()`;
        default:
          return obj.toString();
      }
    },
    rejectObject: function(obj, fn) {
      var newObj;
      newObj = utility.mapObject(obj, function(val, p, i, obj) {
        if (fn(val, p, i, obj)) {
          return val;
        } else {
          return null;
        }
      });
      return utility.compactObject(newObj);
    }
  };

  module.exports = utility;

}).call(this);
