// Generated by CoffeeScript 2.3.1
(function() {
  var BusinessDay, _, holidays_jp, moment;

  _ = require('lodash');

  moment = require('moment');

  holidays_jp = require('../holidays-jp.json');

  BusinessDay = class BusinessDay {
    static isHoliday(date, holidaysList) {
      var flag;
      flag = (function() {
        switch (moment(date).format('E')) {
          case '6':
          case '7':
            return true;
          default:
            return false;
        }
      })();
      if (holidaysList) {
        if (_.includes(holidaysList, moment(date).format('YYYY-MM-DD'))) {
          flag = true;
        }
      }
      return flag;
    }

    constructor(day, opts = {}) {
      this.opts = opts;
      if (this.opts.country != null) {
        this.holidays = (function() {
          switch (this.opts.country) {
            case 'jp':
            case 'jpn':
            case 'JP':
            case 'JPN':
            case 392:
              return holidays_jp;
            default:
              return null;
          }
        }).call(this);
      } else {
        this.holidays = null;
      }
      this.format = this.opts.format != null ? this.opts.format : 'YYYYMMDD';
      this.m = day ? moment(day) : moment();
    }

    val() {
      return this.m.format(this.format);
    }

    add(count = 1) {
      var _add, i, j, ref, res;
      _add = function() {
        while (true) {
          this.m.add(1, 'day');
          if (!BusinessDay.isHoliday(this.m.format('YYYYMMDD'), this.holidays)) {
            break;
          }
        }
        return this.m.format(this.format);
      };
      res = null;
      for (i = j = 0, ref = count; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        res = _add.call(this);
      }
      return res;
    }

    sub(count = 1) {
      var _sub, i, j, ref, res;
      _sub = function() {
        while (true) {
          this.m.subtract(1, 'day');
          if (!BusinessDay.isHoliday(this.m.format('YYYYMMDD'), this.holidays)) {
            break;
          }
        }
        return this.m.format(this.format);
      };
      res = null;
      for (i = j = 0, ref = count; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        res = _sub.call(this);
      }
      return res;
    }

  };

  module.exports = BusinessDay;

}).call(this);
